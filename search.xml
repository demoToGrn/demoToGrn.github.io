<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[利用 PyInstaller 打包发布 exe 程序]]></title>
    <url>%2FPython%2Fpackage-and-release-exe-program-with-PyInstaller.html</url>
    <content type="text"><![CDATA[在 window 下每次运行 python 脚本都得打开 CMD ，简直难受得一批！找了一下可以打包成 exe 程序的库，事情一下子就轻松得多了！ 一、安装准备0x01. 安装 pywin32下载适用于 window 版本和 python 版本匹配的 pywin32 1$ pip3 install &lt;pywin32本地文件&gt; 0x02. 安装 PyInstaller1$ pip3 install pyinstaller 二、PyInstaller 部分参数 -v，–version 打印 PyInstaller当前版本 -F，–onefile 生成单个捆绑的可执行程序 -D，–onedir 创建包含可执行文件的单目录（默认） -n &lt;Name>，–name &lt;Name> 自定义生成的程序名 -p &lt;Dir>，–paths &lt;Dir> 设置导入库的路径（和使用 PYTHONPATH 效果相似）， 允许多个路径，以 : 分割 -i，–icon=&lt;File> 设置程序的图标 -c，–nowindowed，–console 打开标准 i/o 的控制台窗口（默认） -w，–windowed，–noconsole 不为标准 i/o 提供控制台窗口 –upx-dir=&lt;File> UPX 主要用于压缩，默认会自动搜索 pyinstaller 根目录或项目根目录， 否则需要添加该参数并指定 upx.exe 的路径，需要自己下载 –noupx 不使用 UPX –version-file=&lt;File> 添加版本信息 三、打包并发布程序制作程序的版本信息：pyi-grab_version 目录：D:\Python\Python36\Scripts\pyi-grab_version.exe a. 直接使用 pyi-grab_version.exe 获取某个 exe 程序的版本信息 12$ D:\Python\Python36\Scripts\pyi-grab_version.exe D:\Git\git-bash.exe# Version info written to: file_version_info.txt b. 模仿文件中原有的内容进行适当的修改即可 打包发布程序：1$ pyinstaller -F -i C:\Users\valen\Desktop\favicon.ico --version-file=C:\Users\valen\Desktop\file_version_info.txt -n vpn C:\Users\valen\Desktop\vpn_script.py 注意：打包含多进程的文件时，请在主窗口文件中加入以下代码： 1multiprocessing.freeze_support() 文末照旧，贴上 PyInstaller 官方文档链接：https://pyinstaller.readthedocs.io/en/latest/]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>PyInstaller</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「scrapy」爬虫过程中避免被禁的几个小方法]]></title>
    <url>%2FPython%2Fseveral-small-methods-to-avoid-being-forbidden-in-the-process-of-web-crawler.html</url>
    <content type="text"><![CDATA[0x01. 动态设置 UserAgent 通过不停地切换 UserAgent ，模拟使用不同的浏览器访问 推荐使用 fake-useragent ，为我们提供了众多的 UserAgent ，而且使用方法也简单 a. 安装 fake-useragent1pip install fake-useragent # fake-useragent 详细用法查看 github 上的文档 b. 添加 middleware添加下面内容到 middlewares.py ，主要是重写 process_request（） 1234567891011121314## 动态设置 UserAgent ，可自定义浏览器类型，如 chrome、firefox 等，需要在 settings.py 中设置，不设置默认会返回 randomclass RandomUserAgentMiddlewares(object): def __init__(self, crawler): self.ua = UserAgent() self.ua_type = crawler.settings.get('RANDOM_UA_TYPE', 'random') # 自定义获取的浏览器类型 @classmethod def from_crawler(cls, crawler): return cls(crawler) def process_request(self, request, spider): def get_ua(): return getattr(self.ua, self.ua_type) request.headers.setdefault('User-Agent', get_ua()) 在 settings.py 中关闭默认的 UserAgentMiddleware ，启用自定义的 RandomUserAgentMiddlewares ，并设置 fake-useragent 默认的 UserAgent 类型 12345DOWNLOADER_MIDDLEWARES = &#123; 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None, 'tutorial.middlewares.RandomUserAgentMiddlewares': 543,&#125;RANDOM_UA_TYPE = 'chrome' # 左边的 key 是自定义的，能配合 middlewares 中的参数获取即可 0x02. 禁用 Cookie 在 settings.py 中禁用 cookie ，部分免登陆的网站会在 cookie 中做标记，判断是否是爬虫 1COOKIES_ENABLED = False # 在 spider 中直接设置也可以 0x03. 设置延迟下载 在从同一网站下载连续页面之前应等待的时间 同样是修改 settings.py ，设置延迟下载，尽量地模拟人工操作 1DOWNLOAD_DELAY = 3 # 在 spider 中直接设置也可以 0x04. 动态 ip 代理 网站常用的反爬虫就是封 ip 一段时间，所以我们可以设置动态的 ip 代理解决 跟 0x01.b 差不多，添加 middleware 1234class RandomProxyMiddlewares(object): def process_request(self, request, spider): proxy = rq.get('http://localhost:5000/api').text # 这是我自己的接口，请求成功直接返回代理 39.104.75.54:8080 request.meta['proxy'] = 'http://&#123;0&#125;'.format(proxy) 在 settings.py 中启用 MIDDLEWARES 12345DOWNLOADER_MIDDLEWARES = &#123; # 'tutorial.middlewares.RandomUserAgentMiddlewares': 543, # 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware': None, 'tutorial.middlewares.RandomProxyMiddlewares': 544,&#125; 到这里就没啦，贴一下 scrapy 官网提供的方法：avoiding-getting-banned]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义图片管道 ImagesPipeline 下载图片]]></title>
    <url>%2FPython%2Fcustom-picture-pipeline(Imagespipeline)-to-download-pictures.html</url>
    <content type="text"><![CDATA[题外话：前些天不是重新搭建了 hexo 吗，然后今天有个知识点忘记了，想看看之前的笔记，结果发现，没了，是真的没了！！沃日，之前重新搭建的时候忘记备份了，因为 window 下有一份旧资料，恰巧那份旧资料是几乎没同步过，所以出事了… 教训：凡事记得先备份！！ 一、使用场景当我们在抓取某些资源的时候，刚好同时想下载它的图片的时候，就可以用到 scrapy 提供的一个 item pipeline ，这条管道被称作图片管道，在 ImagesPipeline 类中实现，提供了一个方便并具有额外特性的方法，来下载并本地存储图片: 将所有下载的图片转换成通用的格式（JPG）和模式（RGB） 避免重新下载最近已经下载过的图片 缩略图生成 检测图像的宽/高，确保它们满足最小限制 二、项目实战这里直接使用自定义的方法，以便于自定义我们图片的名称、下载路径 0x01. 定义一个 Item在 items.py 中新建一个 class 123456import scrapy## 这里我只定义两个属性，标题用于存储图片的父目录，链接截取一部分当图片名称class ImageItem(scrapy.Item): image_urls = scrapy.Field() # 图片链接 alt = scrapy.Field() # 图片标题 0x02. 配置 settings.py在 settings.py 中修改或添加以下信息 123# 启用图片管道动能，MyImagesPipeline 是我自定义的 class，在下面的步骤会进行创建ITEM_PIPELINES = &#123;'meituba.pipelines.MyImagesPipeline': 1,&#125;IMAGES_STORE = 'images' # 存储的根目录 如果需要生成缩略图： 12345# 当前默认存储路径为 &lt;IMAGES_STORE&gt;/thumbs/big 和 &lt;IMAGES_STORE&gt;/thumbs/smallIMAGES_THUMBS = &#123; 'small': (50, 50), # key 和 value 均可自定义 'big': (270, 270),&#125; 如果需要过滤过小的图片： 123# 过滤图片高度小于170、宽度小于260的图片IMAGES_MIN_HEIGHT = 170IMAGES_MIN_WIDTH = 260 如果需要忽略近期已经下载过的图片： 12# 90天的图片失效期限IMAGES_EXPIRES = 90 0x03. 自定义图片管道在 pipelines.py 中重写 file_path() ，达到自定义图片存储位置和自定义图片名称的效果 123456789101112131415161718from scrapy.pipelines.images import ImagesPipelinefrom scrapy.http import Requestclass MyImagesPipeline(ImagesPipeline): def get_media_requests(self, item, info): sign = 0 for image_url in item['image_urls']: sign += 1 yield Request(url=image_url, meta=&#123;'item': item, 'sign': sign&#125;) # 重写 file_path() ，自定义存储文件夹名字和图片名字 def file_path(self, request, response=None, info=None): item = request.meta['item'] sign = request.meta['sign']-1 return '%s/%s' % (item['alt'][sign], request.url.split('/')[-1]) # 重写 thumb_path() ，自定义缩略图文件名 def thumb_path(self, request, thumb_id, response=None, info=None): return 'thumbs/%s/%s' % (thumb_id, request.url.split('/')[-1]) 0x04. 编写 spider12345678910111213141516from scrapy import Spiderfrom meituba.items import ImageItemclass MeituSpider(Spider): name = "meitu" # allowed_domains = ["meituba.com"] start_urls = ['http://www.meituba.com/tag/xueshengmei.html'] download_delay = 2 def parse(self, response): item = ImageItem() image_urls = response.xpath('/html/body/div[4]/div[1]/div[2]/ul/li/div[1]/a/img/@src').extract() alt = response.xpath('/html/body/div[4]/div[1]/div[2]/ul/li/div[1]/a/img/@alt').extract() item['image_urls'] = image_urls item['alt'] = alt yield item 三、效果展示运行 scrapy crawl meitu ， 即可查看效果 Ps：万事请先看官网文档：https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/images.html （中文非官方，英文好的可以看英文官方网站）]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「scrapy」自定义图片管道 ImagesPipeline 下载图片]]></title>
    <url>%2FPython%2Fcustom-picture-pipeline(Imagespipeline)-to-download-pictures.html</url>
    <content type="text"><![CDATA[题外话：前些天不是重新搭建了 hexo 吗，然后今天有个知识点忘记了，想看看之前的笔记，结果发现，没了，是真的没了！！沃日，之前重新搭建的时候忘记备份了，因为 window 下有一份旧资料，恰巧那份旧资料是几乎没同步过，所以出事了… 教训：凡事记得先备份！！ 一、使用场景当我们在抓取某些资源的时候，刚好同时想下载它的图片的时候，就可以用到 scrapy 提供的一个 item pipeline ，这条管道被称作图片管道，在 ImagesPipeline 类中实现，提供了一个方便并具有额外特性的方法，来下载并本地存储图片: 将所有下载的图片转换成通用的格式（JPG）和模式（RGB） 避免重新下载最近已经下载过的图片 缩略图生成 检测图像的宽/高，确保它们满足最小限制 二、项目实战这里直接使用自定义的方法，以便于自定义我们图片的名称、下载路径 0x01. 定义一个 Item在 items.py 中新建一个 class 123456import scrapy## 这里我只定义两个属性，标题用于存储图片的父目录，链接截取一部分当图片名称class ImageItem(scrapy.Item): image_urls = scrapy.Field() # 图片链接 alt = scrapy.Field() # 图片标题 0x02. 配置 settings.py在 settings.py 中修改或添加以下信息 123# 启用图片管道动能，MyImagesPipeline 是我自定义的 class，在下面的步骤会进行创建ITEM_PIPELINES = &#123;'meituba.pipelines.MyImagesPipeline': 1,&#125;IMAGES_STORE = 'images' # 存储的根目录 如果需要生成缩略图： 12345# 当前默认存储路径为 &lt;IMAGES_STORE&gt;/thumbs/big 和 &lt;IMAGES_STORE&gt;/thumbs/smallIMAGES_THUMBS = &#123; 'small': (50, 50), # key 和 value 均可自定义 'big': (270, 270),&#125; 如果需要过滤过小的图片： 123# 过滤图片高度小于170、宽度小于260的图片IMAGES_MIN_HEIGHT = 170IMAGES_MIN_WIDTH = 260 如果需要忽略近期已经下载过的图片： 12# 90天的图片失效期限IMAGES_EXPIRES = 90 0x03. 自定义图片管道在 pipelines.py 中重写 file_path() ，达到自定义图片存储位置和自定义图片名称的效果 123456789101112131415161718from scrapy.pipelines.images import ImagesPipelinefrom scrapy.http import Requestclass MyImagesPipeline(ImagesPipeline): def get_media_requests(self, item, info): sign = 0 for image_url in item['image_urls']: sign += 1 yield Request(url=image_url, meta=&#123;'item': item, 'sign': sign&#125;) # 重写 file_path() ，自定义存储文件夹名字和图片名字 def file_path(self, request, response=None, info=None): item = request.meta['item'] sign = request.meta['sign']-1 return '%s/%s' % (item['alt'][sign], request.url.split('/')[-1]) # 重写 thumb_path() ，自定义缩略图文件名 def thumb_path(self, request, thumb_id, response=None, info=None): return 'thumbs/%s/%s' % (thumb_id, request.url.split('/')[-1]) 0x04. 编写 spider12345678910111213141516from scrapy import Spiderfrom meituba.items import ImageItemclass MeituSpider(Spider): name = "meitu" # allowed_domains = ["meituba.com"] start_urls = ['http://www.meituba.com/tag/xueshengmei.html'] download_delay = 2 def parse(self, response): item = ImageItem() image_urls = response.xpath('/html/body/div[4]/div[1]/div[2]/ul/li/div[1]/a/img/@src').extract() alt = response.xpath('/html/body/div[4]/div[1]/div[2]/ul/li/div[1]/a/img/@alt').extract() item['image_urls'] = image_urls item['alt'] = alt yield item 三、效果展示运行 scrapy crawl meitu ， 即可查看效果 Ps：万事请先看官网文档：https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/images.html （中文非官方，英文好的可以看英文官方网站）]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「private」利用 python 制作一个 番羽 士啬 脚本]]></title>
    <url>%2FPython%2Fusing-python-to-make-a-vpn-script.html</url>
    <content type="text"><![CDATA[相信有部分玩家跟我一样，对墙外的需求不多，只是偶尔用一下！但是呢，梯子资源难找，幸运的是我这里收集了几个一直提供免费的资源网站，在修改 host 的方法逐渐消失的时候还可以舒服一小哈子！将就吧！ 0x01. 获取信息直接请求目标站点，提取梯子信息，这里主要用到的库有： requests 、 lxml 和 fake-useragent 12345678910111213141516171819202122232425262728MAX_RETRY = 10ua = UserAgent(use_cache_server=False)def spider(cnt=1): if cnt &lt;= MAX_RETRY: print('Preparing to obtain vpn: &#123;&#125; / &#123;&#125;'.format(cnt, MAX_RETRY)) else: print('The number of connections has reached a maximum, Exit now!') exit() try: headers = &#123;'User-Agent': ua.random&#125; r = rq.get(url='http://ss.ishadowx.com/', headers=headers, timeout=10) if r.status_code == 200: selector = etree.HTML(r.text) ip = selector.xpath('//div/h4[1]/span[1]/text()') port = selector.xpath('//div/h4[2]/span[1]/text()') password = selector.xpath('//div/h4[3]/span[1]/text()') verity_way = selector.xpath('//div/h4[4]/text()') return [ip, port, password, verity_way] else: return spider(cnt + 1) except RequestException: time.sleep(2) return spider(cnt + 1) 0x02. 客户端连接os.system() 调用本地软件 shadowsocks 命令，直接开启服务，获得上帝视角，一览墙外的风光！ 1234def system_script(vpn): i = randint(0, len(vpn[0])-1) command = 'sslocal -b 127.0.0.1 -l 1080 -s &#123;&#125; -p &#123;&#125; -k &#123;&#125; -m &#123;&#125;'.format(vpn[0][i], vpn[1][i].strip(), vpn[2][i].strip(), vpn[3][i][7:]) os.system(command) 0x03. 运行脚本运行脚本，即可自动爬取目标网站上的梯子信息，然后会自动开启连接服务 Ps：配合相应的工具即可实现全局代理，我这里只用于浏览器代理切换，如切换浏览器的代理 贴一下 SwitchyOmega 插件地址：https://github.com/FelisCatus/SwitchyOmega 0x04. 资源清单 python 版本 python 库 本地客户端 chrome 插件(可选) python3 requests、lxml、fake-useragent shadowsocks proxy-switchyomega 官网下载 pip3 install xxx pip3 install xxx chrome 商店/Github 完整源码挂在 GitHub ：demoToGrn/sslocal ，额外打包了一个 exe 程序 这里只提供具体的实现方法，后续的更新只会在 GitHub 上更新，希望本教程对你会有帮助！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>script</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo 搭建个人静态博客到 GitPages]]></title>
    <url>%2FTechnique%2Fhexo-build-a-personal-static-blog-to-gitpages.html</url>
    <content type="text"><![CDATA[好久没碰这个博客了，本来单纯想升级一下的，都已经备份好了，结果不小心 rm -rf，删完备份删源文件，傻傻分不清楚，简直完美，两天没睡觉真的会出事！！不过window下还留了个旧旧的源文件，提个大概配置信息差不多了，趁着事儿不多，重装一遍，正好也可以写个博客记录一下！ 一、安装准备1x01. 安装 npm​ 不晓得是不是得装 Node.js ，我就不瞎折腾了 1$ sudo pacman -S npm # npm install cnpm -g --registry=https://registry.npm.taobao.org 1x02. 安装 hexo1$ sudo npm install -g hexo-cli # sudo cnpm install -g hexo-cli 二、建立网站2x01. 初始化 hexo123$ sudo hexo init ./Github/demoToGrn.github.io # 根据自己的存放位置更改，`&lt;user&gt;.github.io` 是固定的$ cd ./Github/demoToGrn.github.io/$ sudo npm install 生成的树状目录如下:12345678.├── _config.yml # 网站的配置信息├── package.json # 应用程序的信息├── scaffolds # 模版文件夹，新建文章时，Hexo 会根据 scaffold 来建立文件├── source # 存放用户的资源文件| ├── _drafts # 除 _posts 外， _ 开头的文件/文件夹和隐藏的文件都会被忽略| └── _posts # 用户写的文章都会存放在这└── themes # 存放主题，Hexo 会根据主题来生成静态页面 2x02. 测试网站在本地启动一个服务，不指定 port 会默认启动 4000 端口，s 为 server 的简写能启动那就可以正常使用了，接下来就是配置，也就是美妆…1$ sudo hexo s -p 5000 # http://localhost:5000/ 三、个性化设置3x01. Next主题配置a. 下载Next主题12$ cd themes$ sudo git clone https://github.com/iissnan/hexo-theme-next.git b. 在网站根目录下的 _config.yml 中更换主题为Next1themes: hexo-theme-next c. 设置文章默认不展开全部，只抽取120个字做摘要，主题配置文件123auto_excerpt: enable: true length: 120 d. 右下角置顶图标显示滑动条百分比进度，主题配置文件1scrollpercent: true ps： 其他零零碎碎的感觉写完也得写大半天，官网写得也很详细，下面只记录几个常用的就好… 3x02. 一些还不错的配置 tips：在大天朝如果感觉 npm 访问速度慢的话，可以再安装淘宝家的 cnpm，替换 npm 使用 1sudo npm install cnpm -g --registry=https://registry.npm.taobao.org a. Local Search需要在网站根目录安装，然后在主题配置文件中配置，即Next主题中的配置文件 _config.yml 1$ sudo npm install hexo-generator-searchdb --save # sudo cnpm install hexo-generator-searchdb --save b. 来必力评论系统直接登录 来必力官网，注册帐号开个页面，然后把 uid 拿回来丢到 主题配置文件中即可 1livere_uid: 7f5391632a2331b1aa5508ddxxxxxxxxx c. 文章设置密码访问​ 把 &lt;script&gt; 中的代码复制到 themes/hexo-theme-next/layout/_partials/head.swig 中，然后在文章头添加 password：xxx 即可给该文章设置访问密码，不添加或为空时表示不加密；代码中的网址了解一下 12345678910111213&lt;script&gt; (function()&#123; if('&#123;&#123; page.password &#125;&#125;')&#123; if (prompt('请输入文章密码') !== '&#123;&#123; page.password &#125;&#125;')&#123; alert('密码错误！'); if(history.length==1) location.replace("http://saltedfish.org"); else history.back(); &#125; &#125; &#125;)();&lt;/script&gt; d. 给鼠标添加爱心点击特效​ 把 love.js 文件添加到 /themes/hexo-theme-next/source/js/src 文件目录下，添加下面的代码 1&lt;script type="text/javascript" src="/js/src/love.js"&gt;&lt;/script&gt; e. 文章添加阴影特效​ 把下面代码添加到 themes/hexo-theme-next/source/css/_custom/custom.styl 中即可 1234567.post &#123; margin-top: 60px; margin-bottom: 60px; padding: 25px; -webkit-box-shadow: 0 0 5px rgba(202, 203, 203, .5); -moz-box-shadow: 0 0 5px rgba(202, 203, 204, .5);&#125; f. 文末标签 # 换成图片 ​ 修改模板 /themes/hexo-theme-next/layout/_macro/post.swig ，搜索 rel=&quot;tag&quot;# ，​ 将 # 换成 &lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 即可 g. 右侧栏头像变圆可旋转123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354.site-author-image &#123; display: block; margin: 0 auto; padding: $site-author-image-padding; max-width: $site-author-image-width; height: $site-author-image-height; border: $site-author-image-border-width solid $site-author-image-border-color; /* 头像圆形 */ border-radius: 80px; -webkit-border-radius: 80px; -moz-border-radius: 80px; box-shadow: inset 0 -1px 0 #333sf; /* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*/ /* 鼠标经过头像旋转360度 */ -webkit-transition: -webkit-transform 1.0s ease-out; -moz-transition: -moz-transform 1.0s ease-out; transition: transform 1.0s ease-out;&#125;img:hover &#123; /* 鼠标经过停止头像旋转 -webkit-animation-play-state:paused; animation-play-state:paused;*/ /* 鼠标经过头像旋转360度 */ -webkit-transform: rotateZ(360deg); -moz-transform: rotateZ(360deg); transform: rotateZ(360deg);&#125;/* Z 轴旋转动画 */@-webkit-keyframes play &#123; 0% &#123; -webkit-transform: rotateZ(0deg); &#125; 100% &#123; -webkit-transform: rotateZ(-360deg); &#125;&#125;@-moz-keyframes play &#123; 0% &#123; -moz-transform: rotateZ(0deg); &#125; 100% &#123; -moz-transform: rotateZ(-360deg); &#125;&#125;@keyframes play &#123; 0% &#123; transform: rotateZ(0deg); &#125; 100% &#123; transform: rotateZ(-360deg); &#125;&#125; h. 恶搞网站 Title​ 创建文件 title-cheat.js，添加以下代码，然后移动到 /themes/hexo-theme-next/source/js/src/ 下 1234567891011121314151617&lt;!--崩溃欺骗--&gt;var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () &#123; if (document.hidden) &#123; $('[rel="icon"]').attr('href', "/img/TEP.ico"); document.title = '╭(°A°`)╮ 页面崩溃啦 ~ '; clearTimeout(titleTime); &#125; else &#123; $('[rel="icon"]').attr('href', "/favicon.ico"); document.title = '(ฅ&gt;ω&lt;*ฅ) 嘿嘿又好了 ~ ' + OriginTitile; titleTime = setTimeout(function () &#123; document.title = OriginTitile; &#125;, 2000); &#125;&#125;); 在 /themes/hexo-theme-next/layout/_layout.swig 中引入以下代码 12&lt;!--崩溃欺骗--&gt;&lt;script type="text/javascript" src="/js/src/title-cheat.js"&gt;&lt;/script&gt; i. 添加在线联系功能（类似网页客服）ix01. 打开 /themes/hexo-theme-next/layout/_partials/head.swig ，随便找个位置粘贴下面的代码 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i["DaoVoiceObject"]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset="utf-8";m.parentNode.insertBefore(a,m)&#125;)(window,document,"script",('https:' == document.location.protocol ? 'https:' : 'http:') + "//widget.daovoice.io/widget/0f81ff2f.js","daovoice") daovoice('init', &#123; app_id: "&#123;&#123;theme.daovoice_app_id&#125;&#125;" &#125;); daovoice('update'); &lt;/script&gt;&#123;% endif %&#125; ix02. 点击 DaoVoice官网 进行注册，提取网站给的 app_id ，打开主题配置文件，加入下面代码，把 app_id 替换进去 123# Online contactdaovoice: truedaovoice_app_id: &#123;your app_id&#125; 如果没什么错误，网站右下角会出现一个聊天图标，但是这时候我们会发现，它把我们网页中部分按钮给遮挡住了！其实在官网设置一下聊天窗口样式就好了，具体路径：应用设置 &gt; 聊天设置，找不到记得往下拉一点 四、网站性能优化ax01. 压缩渲染完的博文 hexo generator 生成的页面中有很多空行和无用的空格，为了减少客户的访问流量，压缩 html、css 和 js 12$ sudo npm install gulp -g # sudo cnpm install gulp -g$ sudo npm install gulp-minify-css gulp-uglify gulp-htmlmin gulp-htmlclean gulp --save 创建 gulpfile.js 文件，把下面的代码复制进去，然后移动到 package.json 同级目录下 12345678910111213141516171819202122232425262728293031323334var gulp = require('gulp');var minifycss = require('gulp-minify-css');var uglify = require('gulp-uglify');var htmlmin = require('gulp-htmlmin');var htmlclean = require('gulp-htmlclean');// 压缩 public 目录 cssgulp.task('minify-css', function() &#123; return gulp.src('./public/**/*.css') .pipe(minifycss()) .pipe(gulp.dest('./public'));&#125;);// 压缩 public 目录 htmlgulp.task('minify-html', function() &#123; return gulp.src('./public/**/*.html') .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest('./public'))&#125;);// 压缩 public/js 目录 jsgulp.task('minify-js', function() &#123; return gulp.src('./public/**/*.js') .pipe(uglify()) .pipe(gulp.dest('./public'));&#125;);// 执行 gulp 命令时执行的任务gulp.task('default', [ 'minify-html','minify-css','minify-js']); ax02. 简化测试与部署等操作（纯个人习惯）在 package.json 中添加多个合并的操作命令 1234"scripts": &#123; "d": "hexo clean &amp;&amp; hexo g &amp;&amp; gulp &amp;&amp; hexo d", "local": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"&#125;, 远程部署： sudo npm run d 本地调试： sudo npm run local ps：使用 deploy 的时候，远程部署得先配置好，下面一节正好讲到 五、部署到 Githuba. 在 Github 上创建一个 repository ，命名为 &lt;uesr&gt;.github.iob. 为 Hexo 安装 git 插件，并 在站点配置文件中加入以下配置 ，即网站根目录下的 _config.yml1$ sudo npm install hexo-deployer-git --save # sudo cnpm install hexo-deployer-git --save 1234deploy: type: git repo: https://github.com/demoToGrn/demoToGrn.github.io.git # 根据自己的改 branch: master c. 生成静态文件并部署到 Github123$ sudo hexo clen # 清除缓存$ sudo hexo g # 生成静态文件，可以部署之前 `sudo gulp` ，压缩渲染完的文件（步骤ax01）$ sudo hexo d # 部署到 Github d. 绑定域名​ 1. 不绑定默认会使用 https://&lt;user&gt;.github.io，在站点 source 文件中添加 CNAME文件，并在里面写入你的域名，例如：saltedfish.org；或者直接在 Github 的 repository 中添加该文件 ​ 2. 在解析域名服务中添加一条 CNAME 记录，比如我的是在腾讯云解析的，添加一条 CNAME 记录，让它指向 GitPages 的默认域名 六、贴上官网教程，其实官网的教程已经很详细了 Hexo官网： https://hexo.io/zh-cn/docs/index.html Next官网：http://theme-next.iissnan.com/getting-started.html]]></content>
      <categories>
        <category>Technique</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「private」About My Dream]]></title>
    <url>%2FPorse%2Fabout-my-dream.html</url>
    <content type="text"><![CDATA[Dream List &#9745; 看一场演唱会&#9744; 省外旅行一次（非跟团）&#9744; 国外旅行一次（非跟团）&#9744; 玩一次蹦极&#9744; 与心爱的人坐一次摩天轮&#9745; 学一门自己喜欢的编程语言（python）&#9744; 能处于一个融洽的开发团队]]></content>
      <categories>
        <category>Porse</category>
      </categories>
      <tags>
        <tag>dream</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL 常用语法]]></title>
    <url>%2FRules%2Fsql-common-syntax.html</url>
    <content type="text"><![CDATA[DDL：Data Definition LanguageDML：Data Manipulation Language 约束条件 表级约束 列级约束 UNIQUE KEY 唯一 UNIQUE(name); PRIMARY KEY 主键 PRIMARY KEY(name); NOT NULL 非空 NOT NULL(name,sex); CHECK 检查 CHECK(sex=’男’ OR sex=’女’); FOREIGN KEY 外键 FOREIGN KEY(tb_id) REFERENCES tb_2(id); tb_id INT REFERENCES tb_2(id); 联合约束 联合唯一 1UNIQUE(name, id); # 以 name 和 id 作为一个整体，再约束其整体为唯一 联合主键 1PRIMARY KEY(name, id); # 以 name 和 id 作为一个整体，再约束其整体为主键 ALTER 增加主键 1ALTER TABLE tb_1 ADD PRIMARY KEY(id); 增加主键并自定义约束名为 tb_1_pk 1ALTER TABLE tb_1 ADD CONSTRAINTS tb_1_pk PRIMARY KEY(id); 增加外键，从表 tb_1 中字段 tb_id 添加 主表 tb_2 中字段 id 为外键 1ALTER TABLE tb_1 ADD FOREIGN KEY(tb_id) REFERENCES tb_2(id); 删除约束名为 tb_1_pk 的约束条件 1ALTER TABLE tb_1 DROP CONSTRAINTS tb_1_pk; 禁用约束名为 tb_1_pk 的约束条件 1ALTER TABLE tb_1 DISABLE CONSTRAINTS tb_1_pk; 激活约束名为 tb_1_pk 的约束条件 1ALTER TABLE tb_1 ENABLE CONSTRAINTS tb_1_pk; 添加列 1ALTER TABLE tb_1 ADD column_name INT; 删除列 1ALTER TABLE tb_1 DROP COLUMN column_name; 修改列 1ALTER TABLE tb_1 CHANGE column_old column_new INT; 重命名表 1ALTER TABLE tb_1 tb_2; 添加索引 1ALTER TABLE tb_1 ADD INDEX index_name (name,sex); 删除索引 1ALTER TABLE tb_1 DROP INDEX index_name; 约束相关的数据字典12SELECT * FROM user_constraints WHERE table_name = 'TEST';SELECT * FROM user_cons_columns WHERE table_name = 'TEST'; 删除a. DELETE –DML 配合 where 条件约束删除数据，可以 ROLLBACK ，保留表结构，速度最慢b. TRUNCATE –DDL TRUNCATE 是截断表的所有数据(格式化表)，不能 ROLLBACK ，保留表结构，速度较快c. DROP –DDL 删除表结构及表的所有数据，不能 ROLLBACK ，不保留表结构，速度最快 DISTUNCT - 从返回的结果集中去除重复项 12SELECT DISTUNCT name FROM tb_1; # 去除 name 的重复项再展示查询结果SELECT DISTUNCT name, sex FROM tb_1; # 去除 name 和 sex 作为一个整体的重复项再展示查询结果 BETWEEN .. AND ..12SELECT * FROM tb_1 WHERE num BETWEEN 800 AND 1600;SELECT * FROM tb_1 WHERE num &gt;= 800 AND num &lt;= 1600; IN - 在列出的值中使用 12SELECT * FROM tb_1 WHERE num = 30 OR num = 40;SELECT * FROM tb_1 WHERE num IN (30,40); LIKE - 模糊查询 %(适配全部字符) _(适配单个字符) 1SELECT * FROM tb_1 WHERE name = '_A%'; # 查询 tb_1 表中 name 第二个字符为 A 的所有信息 IS NULL - 查询空值 12SELECT * FROM tb_1 WHERE NAME IS NULL; # 查询 tb_1 表中 name 为空值的所有信息SELECT * FROM tb_1 WHERE NAME = ''; # 这种写法是错误的 优先级1NOT &gt; AND &gt; OR ORDER BY子句 - 结果排序 ASC表示升序 DESC表示降序 默认为升序 1SELECT * FROM tb_1 ORDER BY num DESC; # 查询 tb_1 表中的所有信息，并按照 num 的降序将结果展示出来 函数 - 聚合函数都会忽略NULL值 COUNT( ) - 统计行数 SUM( ) - 求和 AVG( ) - 平均值 MAX( ) - 最大值 MIN( ) - 最小值 GROUP BY 分组 - 其真正的作用在于与各种组函数结合使用，用来对查询出来的数据进行分组 1SELECT deptno, COUNT(*), SUM(num), AVG(num), MAX(num), MIX(num) FROM tb_1 GROUP BY deptno; # 分组显示 deptno 中 num 的总数、总和、平均值、最大值和最小值 HAVING子句 - WHERE 搜索条件在进行分组操作之前应用；而 HAVING 搜索条件在进行分组操作之后应用。 - HAVING 语法与 WHERE 语法类似，但 HAVING 可以包含聚合函数。 - HAVING 子句可以引用选择列表中显示的任意项。 1SELECT deptno,COUNT(*),SUM(sal),AVG(sal),MAX(sal),MIN(sal) FROM scott.emp GROUP BY deptno HAVING SUM(sal) &gt; 9000 ORDER BY SUM(sal) DESC; ROWNUM - 虚假的列(伪列)，因为 ROWNUM 都是从1开始,但是1以上的自然数在 ROWNUM 做等于判断是时认为都是 false 条件，即必须有前一个才会有后一个 INDEX 索引 - 在数据库中用来加速对表的查询，通过使用快速路径访问方法快速定位数据，减少了磁盘的 I/O 特点 与表独立存放，但不能独立存在，必须属于某个表 由数据库自动维护，表被删除时，该表上的索引自动被删除。 1CREATE INDEX index_name ON tb_1(name); # 给表 tb_1 中的字段 name 创建一个索引名为 index_name 的索引 SEQUENCE 序列 eg： CREATE SEQUENCESE seq_nameminvalue 1 最小值：1maxvalue 999 最大值：999start with 1 开始值：1increment by 5 自增值：5cache 20; 缓存值:20，超过20会自动创建一个20个值的缓存，不需要时 noache 序列的两个重要属性：currval 当前值，nextval 当前值增加一次后的值 seq_name.currval 1 seq_name.nextval 6 VIEW 视图 - 因为部分已执行过，所以部分不需要再编译，使用的时候比普通的语句快，简化sql语句 创建： 1CREATE VIEW v_indo AS SELECT deptno AS 部门, count(*) 人数, SUM(sal) 总工资, AVG(sal) 平均工资 FROM tb_1 GROUP BY deptno; 使用： 1SELECT * FROM v_info; 删除： 1DROP VIEW v_info;]]></content>
      <categories>
        <category>Rules</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown 的常用语法]]></title>
    <url>%2FRules%2Fmarkdown-common-syntax.html</url>
    <content type="text"><![CDATA[-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+–+-+-+–+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 目录 横线 标题 文本 普通文本 单行文本 多行文本 文字高亮 换行 斜体斜体、粗体、删除线 链接 文字链接 图片链接 锚点 列表 无序列表 有序列表 复选框列表 块引用 块引用的多级结构 代码高亮 表格 对齐方式 表格嵌入其他语法 -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+–+-+-+–+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+- 横线 = 在文字下使用会使文字出现 一级标题 效果，而自身显示 细横线，空行下使用依然显示为细横线- 在文字下使用会使文字出现 二级标题 效果，而自身显示 细横线 ，空行下如果 - &gt; 3 则为 粗横线 * 和 _ 个数大于3，在文字下或者空行下使用均显示为 粗横线 标题 # 一级 、## 二级，其他依次类推，为了美观也可以这样： # 一级 # 、## 二级 ## 文本普通文本 这是一段直接输入的普通文本 单行文本在一行开头加入1个Tab或者4个空格 多行文本语法一：在连续几行文本开头加入1个Tab或者4个空格 语法二：使用一对各3个的反引号,该语法也可以实现代码高亮 文字高亮 文字高亮功能可以使行内部文字高亮,使用一对 `反引号` 即可也比较适合做一篇博文的 Tag 效果：fuck the world 换行 a. 直接回车不能换行，可以在上一行文本后补两个空格，实现换行b. Markdown语法支持部分 html 标签，可使用 &lt;br&gt; 、&lt;br/&gt; 换行c. 使用空行也可以实现换行，但上下文本间会多出一个空行 斜体、粗体、删除线 语法 效果 *斜体* 、_斜体_ _斜体_ **粗体** 、__粗体__ 粗体 ~~删除线~~ 删除线 ~~***斜粗删组合***~~ 斜粗删组合 链接文字链接 法一： [alt](url &quot;title&quot;) 法 [alt][xxx]二 [xxx]:url &quot;title&quot; alt 表示替换掉链接所显示的文本 title 表示鼠标悬停在 alt 时显示的文本(可省略) url 点击进行跳转的超链接,可以是内链接也可以是外链接 xxx 只充当一个标识符，通常第一句占位，第二句放句末便于管理 图片链接 用法与文字链接一样，区别是前面多了一个 !，而且不能进行跳转 基本格式： ![alt](url &quot;title&quot;) 法 ![alt][xxx]二 [xxx]:url &quot;title&quot; alt 表示图片加载失败时的替换文本(可省略) title 表示鼠标悬停在图片时显示的文本(可省略) url 点击进行跳转的超链接,可以是内链接也可以是外链接 xxx 只充当一个标识符，通常第一句占位，第二句放句末便于管理 锚点 本文的目录就是用锚点进行捆绑的，和HTML的锚点 #标记 类似 语法 效果 [回到目录](#目录) 回到目录 [跳到复选框列表](#复选框列表) 跳到复选框列表 列表无序列表 * 嘿嘿 - 呵呵 * 哈哈 多级无序列表 最高级别顶格 *，级别往下依次加一个Tab或4个空格的距离 * 级别最高 * 级别其次 * 级别其次 * 级别最低 有序列表 就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显 有序列表自动排序 在第一行指定 1.，接下来的几行用星号 * ，或者继续用数字 1.，它会自动显示成 2.、3.、4.，接着上一个数字往下自动添加序号 复选框列表 - ( hexo 好像无法渲染，github 倒是可以，这里用特殊字符来展示效果) 语法：- [x] 需求分析 、- [ ] 系统设计&#9745; 需求分析&#9745; 系统设计&#9745; 详细设计&#9744; 编码&#9744; 测试&#9744; 交付 通常用于标注某个项目各项任务完成情况 tip: 在Github的issue中使用该语法可以实时点击复选框来勾选或解除勾选,而无需修改issue原文 块引用块引用的多级结构 其实本文为了美化，几乎所有举例的地方都有用到这个功能(与 &gt; 之间可以不空一格)1234&gt; 生物&gt;&gt; 动物&gt;&gt;&gt; 人类&gt;&gt;&gt;&gt; 小妹妹 生物 动物 人类 小妹妹 代码高亮 ``` javapublic static oid main(String[] args){}``` ​ 在3个反引号后面加上编程语言的名称，另起一行开始写代码，最后一行再加上3个反引号 1public static oid main(String[] args)&#123;&#125; //java 1int main(int atgc, char *argv[]) //c 1echo "hello, markdown" #bash 1document.getElementById("myH1").innerHTML="Welcome to my Homepage"; //javascript 1string &amp;operator+(const string&amp; A, const string&amp; B) //cpp 表格表格展示及语法: 语法1 语法2 表头1丨表头2 丨表头1丨表头2丨 - - - - - 丨- - - - - 丨- - - - -丨- - - - -丨 表格单元丨表格单元 丨表格单元丨表格单元丨 表格单元丨表格单元 丨表格单元丨表格单元丨 对齐方式 中对齐,右对齐,左对齐：:----:|----:|:----左对齐,中对齐,右对齐：|:----|:-----:|-----:| 表格嵌入其他语法 表格还可以嵌入其他语法,如对文字的设置、表格嵌入图片、链接等其他内容，此处不作演示 tips:本文整理自 Github 上的大牛，并根据个人喜好进行修改处理createTime：2016.08.07 18:02:10]]></content>
      <categories>
        <category>Rules</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式]]></title>
    <url>%2FRules%2Fregex.html</url>
    <content type="text"><![CDATA[界定符 界定符表示一个正则表达式的开始和结束 // ## {}但 {} 也可用作正则表达式的运算符，为避免产生歧义，通常不用 {}1$pattern = '/[0-9]/'; 原子概念 可见原子Unicode 编码表中用键盘输出后肉眼可见的字符 不可见原子Unicode 编码表中用键盘输出后肉眼不可见的字符，例如空格等 元字符 原子的筛选方式- | 匹配两个或多个分支选择- [] 匹配方括号中的任意一个原子- [^] 匹配除方括号中的原子之外的任意字符，^ 必须跟在左方括号后面 12[Dd]uang~ 等同于 Duang~|duang~[a-zA-Z] 与 [a-z A-Z] 所匹配到的字符不一样,后者多匹配一个空格符 原子的集合- . 匹配除换行符之外的任意字符，注:这个不是专一匹配符号”.“- \d 匹配任意一个十进制数字，即 [0-9]- \D 匹配任意一个非十进制数字，即 [^0-9]- \s 匹配一个不可见原子，即 [\f\n\r\t\v]- \S 匹配一个可见原子，即 [^\f\n\r\t\v]- \w 匹配任意一个数字、字母或下划线，即 [0-9a-zA-Z_]- \W 匹配任意一个非数字、字母或下划线，即 [^0-9a-zA-Z_] 量词 量词- {n} 表示其前面的原子恰好出现 n 次- {n,} 表示其前面的原子最少出现 n 次- {n,m} 表示其前面的原子最少出现 n 次，最多出现 m 次- * 匹配0次、1次或多次其之前的院子，即 {0,}- + 匹配1次或多次其之前的原子，即 {1,}- ? 匹配0次或1次其之前的原子，即 {0,1}1[a-z]&#123;4,5&#125; * 边界控制/定位符 - ^ 匹配字符串开始的位置 - $ 匹配字符串结束的位置 - () 匹配其中的整体为一个原子 12 ^Duang$ 强制必须以 D 开头，前面不能有其它内容，必须以 g 结尾 (Duang) 匹配一个整体 Duang ， 当作一个原子对待 * 修正模式/修饰符 贪婪匹配 - 匹配结果存在歧义是取其长 1234$pattern = '/imooc.+123/';$subject = 'I love imooc_123123123123';result: imooc_123123123123 懒惰匹配 - 匹配结果存在歧义是取其短 1234$pattern = '/imooc.+123/U';$subject = 'I love imooc_123123123123';result: imooc_123 *！ 默认模式为贪婪匹配，若改为懒惰匹配只需要在界定符的后面加 U 常见的修正模式 - U 懒惰匹配 - i 忽略英文大小写 - x 忽略空白 - s 让元字符 . 匹配包括换行符在内的所有字符 —— This is all. 2016.05.06]]></content>
      <categories>
        <category>Rules</category>
      </categories>
      <tags>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Archlinux + Window10 双系统安装教程]]></title>
    <url>%2FLinux%2Farchlinux%2Bwindow10-dual-system-installation-tutorial.html</url>
    <content type="text"><![CDATA[—— 本文主要针对的是使用 BIOS 和 MBR 的计算机，不过考虑到目前都开始使用支持 UEFI 的机器 —— 并且可能由于部分原因需要使用 GPT ，所以附上相关安装方法，但安装方法本人尚未测试 *Archlinux 的优点： 滚动升级，再也无需因为发行版的更新和重装系统 软件包很新，第一时间尝试新的软件，比如最新的内核 pacman 能够完美得处理软件包的依赖问题，再也不会因为删除 ibus 而导致 gnome 启动不了 详细的 wiki ，基本能够找到你想要的，如果你的英文OK（所以大家还是要适当重视下英文的） *Archlinux 的缺点： 据说 pacman 会滚动失败，反正我是从没遇到过 安装有一定难度，这不就是这个教程存在的意义么 软件包都是最新的，所以可能存在 bug ，确实够恶心的，貌似他们没有测试完全 总结：Archlinux 适合喜欢折腾的人，我确信你们也将和我一样热爱这个系统 * Warming：文中出现 ps 字样的均表示本人所进行的安装方式！！ Category Description 系统 win10 + archlinux 安装版本 archlinux-2016.03.01-dual.iso 安装盘 PowerISO制作U盘启动器 分区工具 PE系统，划分出来的盘分别是 sda3 、sda4 网络连接 无线网络 以下奉上安装教程：一、安装准备1x01. 下载镜像 Archlinux 镜像文件官方下载地址：https://www.archlinux.org/download 国人都喜欢 163 的源，所以此处我选择 163 的源下载，下载成功后进行 MD5 和 SHA1 校验，防止包出错 此教程中我选择的是刻录到U盘，制作U盘启动器，你们可以根据自己的需求进行选择 1x02. 连接网络 Archlinux 所有的安装包都是从网络上下载安装的，所以在安装之前，一定要确保系统是保持联网状态 此处我采用的是无线网络连接方式，其他连接方式可以自行 wiki 或 google ，连接后 ping 测试是否接通 1$ wifi-menu 二、安装基本系统2x01. UEFI 模式测试 如果你想使用 UEFI ，并且你的机器支持UEFI ，你在引导时应该会看到如下选项， 1234# Arch Linux archiso x86_64 UEFI USB# UEFI Shell x86_64 v1# UEFI Shell x86_64 v2# EFI Default Loader 你应该可以知道 Archlinux 只提供 64 位的 UEFI 模式安装，32 位无法引导，如果你忘记了是否出现过上述选项，你也可以使用如下命令： 1$ efivar -l 如果你看到了一大串内容，那就是进入了 UEFI 安装模式。否则，请记住，你的电脑可能不支持 UEFI 或者你没进入 UEFI 安装模式，在后续内容中，你应该选择 BIOS 和 MBR 。 2x02. 创建分区 1） 在这里设计到一个很大的内容，如何安排分区，这个看每个人如何规划了，下面我将使用一个比较普遍的方案： /dev/sda1 200M /boot 物理分区 /dev/sda2 40G / 物理分区 /dev/sda3 60G /home 物理分区 /dev/sda4 4G swap 物理分区 首先是 MBR 分区的创建，这里使用的分区工具是 fdisk，本机只有一个硬盘，所以使用 /dev/sda，如果有多个硬盘，根据绝对地址修改路径 1$ fdisk /dev/sda 其次是 GPT 分区，基本和 MBR 分区一样，只是我们使用的工具是 gdisk， 1$ gdisk /dev/sda 需要注意的是分区的标志， /dev/sda1 EF00 /dev/sda2 8300 /dev/sda3 8300 /dev/sda4 8200 ps：因为本人采用的是双系统，只剩下两个主分区，因此只分区 / 和 /home ，利用 PE 系统对这两个分区进行新建分区，格式暂选为默认的FAT32，格式化后退出。因为我是利用U盘进行安装，所以得先进入 BIOS 系统设置优先启动方式为U盘启动，重启後进入U盘中的 Archlinux，进入前已用 PE 系统对其进行分区，所以无需再使用 fdisk 分区工具对 sda 盘进行操作 2x03. 安装文件系统 1） 在这里 GPT 和 MBR 的区别只有 /dev/sda1 这个分区，我们放到最后解释。 这里我们使用的 FS 是比较成熟的 ext4 ，最后一条命令是开启交换分区，即 swap 分区 1234$ mkfs.ext4 /dev/sda2$ mfks.ext4 /dev/sda3$ mkswap /dev/sda4$ swapon /dev/sda4 2） 对于 /boot 这个分区，使用 MBR 的命令如下： 1$ mkfs.ext4 /dev/sda1 对于 GPT 分区，请使用如下命令： 1$ mkfs.fat -F32 /dev/sd1 ps：本人只有两个目录，盘符为 sda3 和 sda4 ，没有 /boot 和 swap 分区， 不过在以后的使用中需要用到的话可以手动加 12$ mkfs.ext4 /dev/sda3$ mfks.ext4 /dev/sda4 2x04. 挂载分区 如果你使用推荐的分区，请使用以下命令，否则，请自行调整 1234$ mount /dev/sda2 /mnt$ mkdir /mnt/&#123;boot,home&#125;$ mount /dev/sda1 /mnt/boot$ mount /dev/sda3 /mnt/home ps：这是根据我自己的分区情况进行挂载的分区 123$ mount /dev/sda3 /mnt$ mkdir /mnt/home$ mount /dev/sda4 /mnt/home 2x05. 选择更新源 1） 根据你的网络环境选择镜像，选择镜像，只需要将对应地址前的 # 去掉即可，这里推荐使用 ustc 或者 163 的源，添加后执行 pacman -Syy 刷新一下 12$ nano /etc/pacman.d/mirrorlist$ pacman -Syy 163更新源：Server = http://mirrors.163.com/archlinux/$repo/os/$archustc更新源：Server = http://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch 2x06. 部署基本系统 一条基本的命令就能自动完成部署，比 Gentoo 简单不少, 如果你想使用 netstat 和 ifconfig 之类的指令，请加上 net-tools 1$ pacstrap -i /mnt base base-devel net-tools 2x07. 生成 fstab fstab 中记录了挂载的相关信息，Archlinux 中提供了工具来一键生成 1$ genfstab -U -p /mnt &gt;&gt; /mnt/etc/fstab 这里使用的是 UUID ，如果不加 -U ，那么在 fstab 中记录的就是 /dev/sdx 之类的地址，UUID 的方式更加好，原因请自行 wiki 三、基本系统配置3x01. chroot 到新系统 使用 chroot 进入部署好的基本系统，接下来的命令都将在刚刚安装的 Archlinux 系统中执行并生效 1$ arch-chroot /mnt /bin/bash 3x02. 配置 Locale 1） 开启自己会用到的字体，这里我开启 en_US.UTF-8 UTF-8 、 zh_CN.UTF-8 UTF-8 和 zh_TW.UTF-8 UTF-8 1$ nano /etc/locale.gen 2） 接着执行 locale-gen 以生成 locale 信息，将默认语言写入配置文件 locale.conf 12$ locale-gen$ echo LANG=en_US.UTF-8 &gt;&gt; locale.conf 3x03. 设置时区 这里采用上海的时区 1$ ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 3x04. 设置主机名 1） 虽说这里的主机名可以有大写，不过我建议大家使用常规的英文小写 1$ echo 主机名 &gt; /etc/hostname 2） 修改 /etc/hosts 文件的内容，把 &lt;hostname&gt; 下的 myhostname 全部替换成你所设置的主机名 1$ nano /etc/hosts 3x05. 生成初始 ramdisk 环境1$ mkinitcpio -p linux 3x06. 用户设置 1） 首先是设置 root 的密码： 1$ passwd 2） 创建一个日常用户，这里添加 wheel 用户组是为了能够使用 sudo 提权，直接 root 操作风险高 12$ useradd -m -g users -s /bin/bash 用户名$ passwd 用户名 3x07. 安装 grub 启动器 1） 首先是对于 BIOS 用户，这里推荐使用 GRUB 这三条命令分别是使用 pacman 获取 grub ，将引导信息写到 sda ，以及生成配置文件 grub.cfg 123$ pacman -S grub-bios$ grub-install /dev/sda$ grub-mkconfig -o /boot/grub/grub.cfg 对于使用UEFI的用户，推荐使用 gummiboot 。 按照官方 wiki 的说法，只要你使用 UEFI ，无论如何都请安装 dosfstools 和 efibootmgr 1$ pacman -S dosfstools efibootmgr 下面安装 gummiboot ，并用其生成配置 12$ pacman -S gummiboot$ gummiboot --path=/boot install 接下来我们需要创建两个配置文件，如下： 1$ nano /boot/loader/entries/arch.conf title Arch Linux linux /vmlinuz-linux initrd /initramfs-linux.img options root=/dev/sda2 rw 1$ nano /boot/loader/loader.conf default arch timeout 5 这些配置都很简单，请参考相关 wiki . 3x08. 重启系统 1） 需要退出 chroot ，卸载分区，然后直接 reboot 1234$ exit$ umount /mnt/&#123;boot,home&#125;$ umount /mnt$ reboot **！ 如果你的机器只有无线网卡，并且你希望通过 wifi-menu 联网，那么请确保在 reboot 之前，你已经安装了 dialog ！ 1$ pacman -S wpa_supplicant dialog 四、桌面环境和其他软件的安装4x01. 相关驱动安装 a. 安装 alsa （声卡） 1$ pacman -S alsa-utils b. 安装显卡驱动1$ lspci | grep VGA # 查看机子显卡型号 由于电脑的显卡多样，请参考官方 wiki 进行安装适合自己电脑的显卡驱动 Intel graphics： Intel显卡驱动 ATI： ATI显卡驱动 NVIDIA： NVIDIA显卡驱动(闭源) Nouveau(开源) 双显卡共用可以了解下（不建议）： Bumblebee PRIME c. 安装触摸板驱动 1$ pacman -S xf86-input-synaptics ps：触摸板本人一般用不到，而且经常会误触，所以不安装，大家可根据自己喜好选择！ d. 安装 Flash 插件1$ pacman -S flashplugin 4x02. gnome 桌面环境安装 1） gnome 基本环境安装 1$ pacman -S gnome 2） 安装额外软件包 gnome 有一个包合集 gnome-extra ，只不过这个包里面包含了太多没用的东西，所以不安装 3） 其他杂项 设置系统启动后进入 GUI 界面 1$ systemctl enable gdm 安装 gnome 附加配置，可配置插件等，开启完服务后可以删除 1$ pacman -S gnome-tweak-tool 网络管理 1$ pacman -S networkmanager 启动网络连接管理器 1$ systemctl enable NetworkManager 4） 安装 gnome 天气插件 1$ yaourt gnome-shell-extension-weather-git *！ 需要 yaourt 安装，并且需要在 gnome-tweak-tool 开启插件 4x03. ibus-rime 输入法 1） 安装 ibus-rime 1$ pacman -S ibus-rime 2） 安装启动 ibus 的 Qt 应用程序支持，安装 Qt 软件库 1$ pacman -S ibus-qt 3） 在 gnome 区域与语言设置里面，添加新的输入源 4） 等出 gnome ， Alt + F2 输入 r 5） 重新登入，测试右上角的输入法图标是否显示 4x04. 安装 yaourt 1） 将下列内容添加到 /etc/pacman.conf 文件： [archlinuxfr] SigLevel = Nerver Server = http://repo.archlinux.fr/$arch 2） 安装 yaourt 1$ pacman -Sy yaourt 3） 同步源信息 1$ pacman -Sy *！ 用 yaourt 安装东西时不能用 root 用户和 sudo 命令 4x05. 安装 chrome 1） chrome 存在于 AUR 仓库中，用 yaourt 搜索是否存在 1$ yaourt -Ss google-chrome 2） 用 yaourt 安装 chrome 1$ yaourt -S google-chrome 4x05. 注意事项 1） 当提示某个普通用户无法使用 sudo 命令时， 1$ visudo 要为某个用户可以执行所有命令，在配置文件中加入： 用户名 ALL=(ALL) ALL 如果只想允许以某个主机名登录用户执行命令： 用户名 主机名=(ALL) ALL 允许 wheel 用户组成员无密码使用 sudo ： %wheel ALL=(ALL) NOPASSWD: ALL 要不询问某个用户的密码: Defaults:USER_NAME !authenticate 2） gnome 桌面环境下无法运行 Terminal 时，可能是以普通用户运行，并没有配置 Locale ，所以需要创建 /etc/locale.conf 并加入 LANG=en_US.UTF-8 或者在 gnome 图形界面下进入用户界面，选中语言为任意一种 1$ nano /etc/locale.conf 3） 双系统安装 Archlinux 完成后 reboot ，win10 的引导丢失 以下是我的解决方法： 安装读写 NTFS 格式的工具，安装完后可对 NTFS 格式的硬盘进行写入 1$ pacman -S ntfs-3g 重新执行 3x07 的操作 更多详细教程内容，请登录 archlinux wiki 官网进行查询！ —— end. —— This is all. 2016.03.20]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>install</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git 的常用命令]]></title>
    <url>%2FRules%2Fgit-common-commands.html</url>
    <content type="text"><![CDATA[初始化配置配置用户名和邮箱12$ git config --global user.name "zhazhahui"$ git config --global user.email "zhazhahui@example.com" 配置好用户名和邮箱后，会在当前用户主目录下建立 .gitconfig 文件，该配置文件即 git 全局配置的文件，一般配置方法为：1git config --global &lt;配置名称&gt; &lt;配置的值&gt; 假如想在某个项目里设置某个值与全局设置有区别，可以把 --global 去掉，会在当前项目目录下创建 .git/config 来对当前项目配置单独生效 创建SSK密钥1$ ssh-keygen -t rsa -C "zhazhahui@example.com" 创建成功后，用户主目录会生成 .ssh ，含 id_rsa 、id_rsa.pub 两个文件，即 SSH Key 的密钥对id_rsa (私钥)不能泄露出去，id_rsa.pub (公钥)可以放心告诉任何人 公钥贴到 Github1$ cat /home/&lt;user&gt;/.ssh/id_rsa.pub tip： 文件的路径根据自己的实际路径进行更改 其他常用命令remote 查看所有的远程主机，使用 -v 可以查看远程主机的网址1$ git remote -v 关联远程主机，并设主机名为 origin1$ git remote add origin https://github.com/liangzaiming/example.git 删除主机名为 origin 的远程主机1$ git remote remove origin branch 查看当前所在分支的情况1$ git branch 创建分支 a1$ git branch a 切换到分支 a1$ git checkout a 创建并切换到分支 a1$ git checkout -b a 删除分支 a ，若 a 分支的内容没合并到其他分支，则需要使用 -D 强制删除1$ git branch -d a merge 合并分支 a 的内容到分支 master 上（必须把所在分支切换到 master 上）1$ git merge a clone 从远程库克隆 repository 到当前文件夹1$ git clone https://github.com/liangzaiming/example.git status 显示工作树状态1$ git status 0x00 添加文件并更新推送到远程 master 分支123$ git add &lt;fileName&gt;$ git commit -m "Here write the changes of explain"$ git push origin master 0x01 删除文件并更新推送到远程 master 分支123$ git rm &lt;fileName&gt;$ git commit -m "Here write the changes of explain"$ git push origin master 0x02 从远程 master 分支下载更新的内容到本地（多人协作时 push 先 pull ，不容易发生冲突）1$ git pull origin master Tips: By the way, if u want to know even more operations for the git.plese click this net link：learn-github-from-zero.pdf password： 6hbd Event Time Remark create 2015.10.22 创建并记录部分语法 update 2016.08.11 重构文章的内容和排版,并增加部分语法 update 2017.04.11 添加部分常用的语法]]></content>
      <categories>
        <category>Rules</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
